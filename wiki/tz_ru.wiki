= Постановка задачи =

EN|RU

Разработать систему для работы в сети APRS.

Система должна корректно функционировать в многопортовой конфигурации, предоставлять удобный интерфейс для настройки всех функциональных частей продукта: параметры портов, параметры ретрансляции пакетов, параметры маршрутизации пакетов между портами и т. д.

Функциональные блоки системы должны быть веделены в отдельные модули: основной модуль - ядро системы; дополнительные модули - графическая оболочка для отображения карт, почтовая и прочие системы.

Для работы системы должно быть достаточно запустить модуль ядра. Ядро должно обеспечивать независимо от запущенных дополнительных модулей следующую функциональность:

 * работа с физическими портами, драйверами пакетных ядер (например AGW), сетевыми портами (AXIP, APRS Internet Server), с реализацией приема и передачи UI пакетов протокола AX25, которого достаточно для работы протокола APRS (но не достаточно для работы полноценным пакетом AX25); 
 * поддержание списка портов: создание, модификация параметров, удаление; 
 * все действия по настройке ядра не должны требовать его перезапуска и, по возможности, без разрыва соединений там, где это необходимо; 
 * поддержка удаленного конфигурирования; 
 * ведение журнала всех принятых пакетов; 
 * ведения журнала всех услышанных станций; 
 * ведение списка сообщений; 
 * ответ на APRS запросы (PING, DX и т. д.) а так же подтверждение о приеме сообщений (для сообщений, имеющих ID); 
 * ретрансляцию APRS пакетов на порте и между портами (при соответствующей настройке); 
 * выдачу APRS маяка станции с его координатами, текстом маяка, символом, интервалом, с возможностью уникальной настройки по всем перечисленным параметрам отдельно по каждому порту (порты на КВ и УКВ могут отличаться как символом станции, так и интервалом маяка). 
 
 = Анализ ТЗ =
 
Для реализации требований будет использоваться язык программирования с++ и графическая библиотека QT4. Кроме возможности разработки кроссплатформенного графического продукта, данная библиотека предоставляет еще и множество других классов, облегчающих разработку переносимого ПО: классы для работы с файлами, массивами и строками, для работы с сетью, базами данных и т. д.

Для удобства работы и настройки ядра, для хранения параметров, принято решение хранить все настройки в базе данных. Тип базы данных SQLite (возможно потом и MySQL если будут большие объемы данных). Данный тип БД выбран по той причине, что не требуется дополнительный сервер БД - все функции работы с sql встраиваются в клиентскую часть, вся БД размещается в одном файле, БД является переносимой на другую платформу. Информация о подключении к БД (имя файла, тип базы) хранить в текстовом ini файле.
